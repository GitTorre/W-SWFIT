// Operators.h : Defines the operators to search and replace
//

#ifndef OPERATORS_H
#define OPERATORS_H

#include "stdafx.h"
#include "globals.h"

const byte start_pattern_1[] = { 0x55, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xea };
const byte end_pattern_1[] = { 0x48, 0x83, 0xc4, 0x20, 0x5d, 0xc3 };
/*	Begin Function:
	PUSH RBP
	SUB RSP, 0x20
	MOV RBP, RDX
  
    End Function:
	ADD RSP, 0x20
	POP RBP
	RET
*/

const byte start_pattern_2[] = { 0xff, 0xf3, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xd9 };
const byte end_pattern_2[] = { 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3 };
/*	Begin Function:
	PUSH RBX
	SUB RSP, 0x20
	MOV RBX, RCX

  	End Function:
	ADD RSP, 0x20
	POP RBX
	RET
*/

const byte start_pattern_3[] = { 0xff, 0xf3, 0x48, 0x83, 0xec, 0x20, 0x8b, 0xd9 };
const byte end_pattern_3[] = { 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3 };
/*	Begin Function:
	PUSH RBX
	SUB RSP, 0x20
	MOV EBX, ECX

  	End Function:
	ADD RSP, 0x20
	POP RBX
	RET
*/

const byte start_pattern_4[] = { 0x57, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xf9 };
const byte end_pattern_4[] = { 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3 };
/*	Begin Function:
	PUSH RDI
	SUB RSP, 0x20
	MOV RDI, RCX

  	End Function:
	ADD RSP, 0x20
	POP RDI
	RET
*/

const byte start_pattern_5[] = { 0x57, 0x48, 0x83, 0xec, 0x20, 0x8b, 0xf9 };
const byte end_pattern_5[] = { 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3 };
/*	Begin Function:
	PUSH RDI
	SUB RSP, 0x20
	MOV EDI, ECX

  	End Function:
	ADD RSP, 0x20
	POP RDI
	RET
*/

const byte start_pattern_6[] = { 0x57, 0x48, 0x83, 0xec, 0x20, 0x8b, 0xf1 };
const byte end_pattern_6[] = { 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3 };
/*	Begin Function:
	PUSH RDI
	SUB RSP, 0x20
	MOV ESI, ECX

  	End Function:
	ADD RSP, 0x20
	POP RDI
	RET
*/

const byte start_pattern_7[] = { 0xff, 0xf3, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8d, 0x0d };
const byte end_pattern_7[] = { 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3 };
/*	Begin Function:
	PUSH RBX
	SUB RSP, 0x20
	LEA RCX, 'immed'

  	End Function:
	ADD RSP, 0x20
	POP RBX
	RET
*/

const byte start_pattern_8[] = { 0x57, 0x48, 0x83, 0xec, 0x40, 0x48, 0x8b, 0xe9 };
const byte end_pattern_8[] = { 0x48, 0x83, 0xc4, 0x40, 0x5f, 0xc3 };
/*	Begin Function:
	PUSH RDI
	SUB RSP, 0x40
	MOV RBP, RCX

  	End Function:
	ADD RSP, 0x40
	POP RDI
	RET
*/

const byte start_pattern_9[] = { 0x57, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xf1 };
const byte end_pattern_9[] = { 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3 };
/*	Begin Function:
	PUSH RDI
	SUB RSP, 0x20
	MOV RSI, RCX

  	End Function:
	ADD RSP, 0x20
	POP RDI
	RET
*/

 const byte start_pattern_10[] = { 0x57, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xe9 };
 const byte end_pattern_10[] = { 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3 };
/*	Begin Function:
	PUSH RDI
	SUB RSP, 0x20
	MOV RBP, RCX

  	End Function:
	ADD RSP, 0x20
	POP RDI
	RET
*/

 const byte start_pattern_11[] = { 0x57, 0x48, 0x83, 0xec, 0x30, 0x48, 0x8b, 0xe9 };
 const byte end_pattern_11[] = { 0x48, 0x83, 0xc4, 0x30, 0x5f, 0xc3 };
/*	Begin Function:
	PUSH RDI
	SUB RSP, 0x30
	MOV RBP, RCX

  	End Function:
	ADD RSP, 0x30
	POP RDI
	RET
*/

 const byte start_pattern_12[] = { 0x57, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0x05 };
 const byte end_pattern_12[] = { 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3 };
/*	Begin Function:
	PUSH RDI
	SUB RSP, 0x20
	MOV RAX, 'immed'

  	End Function:
	ADD RSP, 0x20
	POP RDI
	RET
*/

 const byte omva_1[] = { 0x48, 0x8b, 0x5c, 0x24, 0x30 }; // MOV RBX, [RSP+0x30]
 const byte omva_2[] = { 0x48, 0x8b, 0x74, 0x24, 0x38 }; // MOV RSI, [RSP+0x38]

#endif